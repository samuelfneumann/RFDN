# Import modules
import numpy as np
import matplotlib.pyplot as plt
import os
from torch import load


# CLass definition
class LearningCurve:
    """
    Class LearningCurve will plot the average learning curve for a number
    of trained networks using the checkpoint files generated by the
    train.Trainer class.
    """
    def __init__(self, checkpoint_dir):
        """
        Constructor, see class documentation for more details.

        Parameters
        ----------
        checkpoint_dir : str
            The absolute path to the directory containing the checkpoint files
        """
        # Get checkpoint filesnames
        self.checkpoint_dir = checkpoint_dir
        self.checkpoint_files = os.listdir(checkpoint_dir)

    def plot(self, type_="psnr", figsize=(16, 9)):
        """
        Plots the learning curves for the model using the average learning
        values found in the checkpoint files. Plots the learning curves for
        the metric defined by type_.

        Parameters
        ----------
        type_ : str, optional
            The type of learning curve to plot, which must be one of 'psnr',
            'ssim', or 'loss', by default "psnr"
        figsize : tuple, optional
            The size of the figure, by default (16, 9)

        Returns
        -------
        np.array of np.float64
            The average values for the learning curve, which are then plotted

        Raises
        ------
        ValueError
            If the type_ argument is not one of 'psnr', 'ssim' or 'loss'
        """
        if type_ not in ("psnr", "ssim", "loss"):
            raise ValueError("error: type_ must be one of 'psnr', 'ssim' or " +
                             "'loss'")

        # Initialize array to hold average type_ values for learning curve
        file1 = load(os.path.join(self.checkpoint_dir,
                                  self.checkpoint_files[0]))
        num_elem = len(file1["lc"][type_])
        points = np.array([0.] * num_elem, dtype=np.float64)

        # Calculate the average type_ values for the learning curve
        for file in self.checkpoint_files:
            checkpoint = load(os.path.join(self.checkpoint_dir, file))
            new_points = checkpoint["lc"][type_]
            points += np.array(new_points)

        points /= len(self.checkpoint_files)

        # Create the figure
        fig = plt.figure(figsize=figsize)
        ax = fig.add_subplot()
        ax.plot(points, label=type_)

        # Adjust figure text
        ax.set_title(f"Learning Curve ({type_})", fontsize=18)
        ax.set_xlabel("epochs", fontsize=15)
        ax.set_ylabel(type_, fontsize=15)
        ax.legend()

        return points
